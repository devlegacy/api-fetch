!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),r=n(2),i=function(){function t(){}return t.prototype.start=function(){console.log(">> Start app"),new o.NavBarComponent,new r.ToDoComponent({selector:"#to-do-container"}).render()},t}();document.addEventListener("DOMContentLoaded",(function(){(new i).start()}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NavBarComponent=void 0;var o=function(){var t=Array.prototype.slice.call(document.querySelectorAll(".navbar-burger"),0);t.length>0&&t.forEach((function(t){t.addEventListener("click",(function(){var e=t.dataset.target,n=document.getElementById(e);t.classList.toggle("is-active"),null==n||n.classList.toggle("is-active")}))}))};e.NavBarComponent=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ToDoComponent=void 0;var o=n(3),r=function(){function t(t,e){void 0===e&&(e=new o.ToDoService),this.options=t,this.toDoService=e,this.posts=[]}return t.prototype.render=function(){var t=this,e=document.querySelector(this.options.selector);this.toDoService.getAll().then((function(n){t.posts=n,e.innerHTML=t.template(),null==e||e.addEventListener("click",(function(e){var n,o=e.target;if(o.classList.value.includes("content")){var r=o.querySelector(".content")||o;t.updateToDo(r)}else if(o.classList.value.startsWith("card-footer-item")){e.preventDefault();r=null===(n=o.closest("article"))||void 0===n?void 0:n.querySelector(".content");t.deleteToDo(r)}}))}))},t.prototype.template=function(){var t="";return this.posts.forEach((function(e){t+='\n        <div class="column is-12">\n          <article class="card">\n            <div class="card-content">\n              <div  class="content"\n                    data-id="'+e.id+'"\n                    data-title="'+e.title+"\"\n                    data-post='"+JSON.stringify(e)+"'>\n                "+e.title+'\n              </div>\n            </div>\n            <footer class="card-footer">\n              <a href="#" class="card-footer-item">Delete</a>\n            </footer>\n          </article>\n        </div>\n      '})),t},t.prototype.updateToDo=function(t){var e=this;t.addEventListener("blur",(function(t){var n=t.target,o=JSON.parse(n.dataset.post);o.title=n.innerText,e.toDoService.update(o),n.classList.remove("px-4","py-4"),n.contentEditable="false"}),{once:!0}),t.classList.add("px-4","py-4"),t.contentEditable="true",t.focus()},t.prototype.deleteToDo=function(t){var e,n=JSON.parse(t.dataset.post);this.toDoService.destroy(n),null===(e=t.closest("div.column"))||void 0===e||e.remove()},t}();e.ToDoComponent=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ToDoService=void 0;var o=n(4),r=n(5),i=function(){function t(){this.serviceURL=r.ApiConfig.BASE_URL+"/todos/",this.http=new o.HttpClient}return t.prototype.getAll=function(t){return void 0===t&&(t=20),this.http.get(this.serviceURL+"?_limit="+t)},t.prototype.find=function(){},t.prototype.create=function(){},t.prototype.update=function(t){return this.http.update(""+this.serviceURL+t.id,t)},t.prototype.destroy=function(t){return this.http.destroy(""+this.serviceURL+t.id)},t}();e.ToDoService=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HttpClient=void 0;var o=function(){function t(){}return t.prototype.get=function(e){return t.configureRequest(e,"GET")},t.prototype.destroy=function(e){return t.configureRequest(e,"DELETE")},t.prototype.post=function(e,n){return void 0===n&&(n=null),t.configureRequest(e,"POST")},t.prototype.update=function(e,n){return void 0===n&&(n=null),t.configureRequest(e,"PUT",n)},t.configureRequest=function(t,e,n){return void 0===n&&(n=null),fetch(t,{method:e,headers:{"Content-Type":"application/json; charset=UTF-8",Accept:"application/json; charset=UTF-8"}}).then((function(t){return t.json()}))},t}();e.HttpClient=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ApiConfig=void 0;var o=function(){function t(){}return t.BASE_URL="https://jsonplaceholder.typicode.com",t}();e.ApiConfig=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL25hdi1iYXIuY29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3RvLWRvLmNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvdG8tZG8uc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvaHR0cC1jbGllbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbmZpZy9hcGktY29uZmlnLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwic3RhcnQiLCJjb25zb2xlIiwibG9nIiwiTmF2QmFyQ29tcG9uZW50IiwiVG9Eb0NvbXBvbmVudCIsInNlbGVjdG9yIiwicmVuZGVyIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiQXBwIiwiJG5hdmJhckJ1cmdlcnMiLCJBcnJheSIsInNsaWNlIiwicXVlcnlTZWxlY3RvckFsbCIsImxlbmd0aCIsImZvckVhY2giLCJlbCIsInRhcmdldCIsImRhdGFzZXQiLCIkdGFyZ2V0IiwiZ2V0RWxlbWVudEJ5SWQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJvcHRpb25zIiwidG9Eb1NlcnZpY2UiLCJUb0RvU2VydmljZSIsInBvc3RzIiwiJGVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidGhpcyIsImdldEFsbCIsInRoZW4iLCJpbm5lckhUTUwiLCJ0ZW1wbGF0ZSIsImUiLCJpbmNsdWRlcyIsIiR0b2RvIiwidXBkYXRlVG9EbyIsInN0YXJ0c1dpdGgiLCJwcmV2ZW50RGVmYXVsdCIsImNsb3Nlc3QiLCJkZWxldGVUb0RvIiwicG9zdCIsImlkIiwidGl0bGUiLCJKU09OIiwic3RyaW5naWZ5IiwicGFyc2UiLCJpbm5lclRleHQiLCJ1cGRhdGUiLCJyZW1vdmUiLCJjb250ZW50RWRpdGFibGUiLCJvbmNlIiwiYWRkIiwiZm9jdXMiLCJkZXN0cm95Iiwic2VydmljZVVSTCIsIkFwaUNvbmZpZyIsIkJBU0VfVVJMIiwiaHR0cCIsIkh0dHBDbGllbnQiLCJsaW1pdCIsImZpbmQiLCJ1cmwiLCJjb25maWd1cmVSZXF1ZXN0IiwiYm9keSIsIm1ldGhvZCIsImZldGNoIiwiaGVhZGVycyIsIkFjY2VwdCIsInJlc3BvbnNlIiwianNvbiJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9C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RzFELFlBQUFhLFFBQUEsU0FBUWIsR0FDTixPQUFPYixLQUFLOEIsS0FBS0osUUFBUSxHQUFHMUIsS0FBSzJCLFdBQWFkLEVBQUtDLEtBRXZELEVBdkJBLEdBQWEsRUFBQWxCLGUsa0dDSGIsK0JBOEJBLE9BN0JFLFlBQUE1QyxJQUFBLFNBQUlrRixHQUNGLE9BQU9ILEVBQVdJLGlCQUFpQkQsRUFBSyxRQUcxQyxZQUFBUixRQUFBLFNBQVFRLEdBQ04sT0FBT0gsRUFBV0ksaUJBQWlCRCxFQUFLLFdBRzFDLFlBQUFyQixLQUFBLFNBQUtxQixFQUFhRSxHQUNoQixZQURnQixJQUFBQSxNQUFBLE1BQ1RMLEVBQVdJLGlCQUFpQkQsRUFBSyxTQUcxQyxZQUFBZCxPQUFBLFNBQU9jLEVBQWFFLEdBQ2xCLFlBRGtCLElBQUFBLE1BQUEsTUFDWEwsRUFBV0ksaUJBQWlCRCxFQUFLLE1BQU9FLElBRzFDLEVBQUFELGlCQUFQLFNBQ0VELEVBQ0FHLEVBQ0FELEdBRUEsWUFGQSxJQUFBQSxNQUFBLE1BRU9FLE1BQU1KLEVBQUssQ0FDaEJHLE9BQU0sRUFDTkUsUUFBUyxDQUNQLGVBQWdCLGtDQUNoQkMsT0FBUSxxQ0FFVHRDLE1BQUssU0FBQ3VDLEdBQXVCLE9BQUFBLEVBQVNDLFdBRTdDLEVBOUJBLEdBQWEsRUFBQVgsYyxpR0NBYiwrQkFHQSxPQUZ5QixFQUFBRixTQUNyQix1Q0FDSixFQUhBLEdBQWEsRUFBQUQiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiaW1wb3J0IHsgTmF2QmFyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL25hdi1iYXIuY29tcG9uZW50JztcbmltcG9ydCB7IFRvRG9Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvdG8tZG8uY29tcG9uZW50JztcblxuY2xhc3MgQXBwIHtcbiAgc3RhcnQoKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coJz4+IFN0YXJ0IGFwcCcpO1xuICAgIG5ldyBOYXZCYXJDb21wb25lbnQoKTtcbiAgICBuZXcgVG9Eb0NvbXBvbmVudCh7IHNlbGVjdG9yOiAnI3RvLWRvLWNvbnRhaW5lcicgfSkucmVuZGVyKCk7XG4gIH1cbn1cblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgbmV3IEFwcCgpLnN0YXJ0KCk7XG59KTtcbiIsImV4cG9ydCBjbGFzcyBOYXZCYXJDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBHZXQgYWxsIFwibmF2YmFyLWJ1cmdlclwiIGVsZW1lbnRzXG4gICAgY29uc3QgJG5hdmJhckJ1cmdlcnMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5uYXZiYXItYnVyZ2VyJyksXG4gICAgICAwXG4gICAgKTtcblxuICAgIC8vIENoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbmF2YmFyIGJ1cmdlcnNcbiAgICBpZiAoJG5hdmJhckJ1cmdlcnMubGVuZ3RoID4gMCkge1xuICAgICAgLy8gQWRkIGEgY2xpY2sgZXZlbnQgb24gZWFjaCBvZiB0aGVtXG4gICAgICAkbmF2YmFyQnVyZ2Vycy5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAvLyBHZXQgdGhlIHRhcmdldCBmcm9tIHRoZSBcImRhdGEtdGFyZ2V0XCIgYXR0cmlidXRlXG4gICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZWwuZGF0YXNldC50YXJnZXQ7XG4gICAgICAgICAgY29uc3QgJHRhcmdldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhcmdldCk7XG5cbiAgICAgICAgICAvLyBUb2dnbGUgdGhlIFwiaXMtYWN0aXZlXCIgY2xhc3Mgb24gYm90aCB0aGUgXCJuYXZiYXItYnVyZ2VyXCIgYW5kIHRoZSBcIm5hdmJhci1tZW51XCJcbiAgICAgICAgICBlbC5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgICAkdGFyZ2V0Py5jbGFzc0xpc3QudG9nZ2xlKCdpcy1hY3RpdmUnKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFRvRG9TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdG8tZG8uc2VydmljZSc7XG5pbXBvcnQgeyBSZW5kZXJlZENvbXBvbmVudCB9IGZyb20gJy4uL2NvcmUvY29tcG9uZW50cy9yZW5kZXJlZC1jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29tcG9uZW50T3B0aW9uIH0gZnJvbSAnLi4vY29yZS9vcHRpb25zL2NvbXBvbmVudC1vcHRpb24nO1xuXG5leHBvcnQgY2xhc3MgVG9Eb0NvbXBvbmVudCBpbXBsZW1lbnRzIFJlbmRlcmVkQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBwb3N0czogQXJyYXk8UG9zdD4gPSBbXTtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBvcHRpb25zOiBDb21wb25lbnRPcHRpb24sXG4gICAgcHJpdmF0ZSB0b0RvU2VydmljZTogVG9Eb1NlcnZpY2UgPSBuZXcgVG9Eb1NlcnZpY2UoKVxuICApIHt9XG5cbiAgcmVuZGVyKCk6IHZvaWQge1xuICAgIGNvbnN0ICRlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLm9wdGlvbnMuc2VsZWN0b3IpO1xuXG4gICAgdGhpcy50b0RvU2VydmljZS5nZXRBbGwoKS50aGVuKChwb3N0czogQXJyYXk8UG9zdD4pID0+IHtcbiAgICAgIHRoaXMucG9zdHMgPSBwb3N0cztcbiAgICAgICRlbGVtZW50IS5pbm5lckhUTUwgPSB0aGlzLnRlbXBsYXRlKCk7XG5cbiAgICAgIC8vIEVkaXQgdGV4dFxuICAgICAgJGVsZW1lbnQ/LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGU6IEV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IDxIVE1MRWxlbWVudD5lLnRhcmdldDtcbiAgICAgICAgaWYgKHRhcmdldC5jbGFzc0xpc3QudmFsdWUuaW5jbHVkZXMoJ2NvbnRlbnQnKSkge1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRhcmdldCk7XG4gICAgICAgICAgY29uc3QgJHRvZG86IEhUTUxFbGVtZW50IHwgbnVsbCA9XG4gICAgICAgICAgICB0YXJnZXQucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKSB8fCB0YXJnZXQ7XG4gICAgICAgICAgdGhpcy51cGRhdGVUb0RvKCR0b2RvKTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQuY2xhc3NMaXN0LnZhbHVlLnN0YXJ0c1dpdGgoJ2NhcmQtZm9vdGVyLWl0ZW0nKSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBjb25zdCAkdG9kbzogSFRNTEVsZW1lbnQgPSA8SFRNTEVsZW1lbnQ+KFxuICAgICAgICAgICAgdGFyZ2V0LmNsb3Nlc3QoJ2FydGljbGUnKT8ucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKVxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5kZWxldGVUb0RvKCR0b2RvKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICB0ZW1wbGF0ZSgpOiBzdHJpbmcge1xuICAgIGxldCB0ZW1wbGF0ZTogc3RyaW5nID0gJyc7XG4gICAgdGhpcy5wb3N0cy5mb3JFYWNoKChwb3N0OiBQb3N0KSA9PiB7XG4gICAgICB0ZW1wbGF0ZSArPSBgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2x1bW4gaXMtMTJcIj5cbiAgICAgICAgICA8YXJ0aWNsZSBjbGFzcz1cImNhcmRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgPGRpdiAgY2xhc3M9XCJjb250ZW50XCJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS1pZD1cIiR7cG9zdC5pZH1cIlxuICAgICAgICAgICAgICAgICAgICBkYXRhLXRpdGxlPVwiJHtwb3N0LnRpdGxlfVwiXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtcG9zdD0nJHtKU09OLnN0cmluZ2lmeShwb3N0KX0nPlxuICAgICAgICAgICAgICAgICR7cG9zdC50aXRsZX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxmb290ZXIgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwiY2FyZC1mb290ZXItaXRlbVwiPkRlbGV0ZTwvYT5cbiAgICAgICAgICAgIDwvZm9vdGVyPlxuICAgICAgICAgIDwvYXJ0aWNsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICBgO1xuICAgIH0pO1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfVxuXG4gIHVwZGF0ZVRvRG8oJHRvZG86IEhUTUxFbGVtZW50KSB7XG4gICAgJHRvZG8hLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAnYmx1cicsXG4gICAgICAoZTogRXZlbnQpID0+IHtcbiAgICAgICAgY29uc3QgdGFyZ2V0OiBIVE1MRWxlbWVudCA9IDxIVE1MRWxlbWVudD5lLnRhcmdldDtcbiAgICAgICAgLy8gY29uc29sZS5kaXIodGFyZ2V0LmlubmVyVGV4dCk7XG4gICAgICAgIC8vIGNvbnNvbGUuZGlyKHRhcmdldC5kYXRhc2V0LmlkKTtcbiAgICAgICAgLy8gY29uc29sZS5kaXIoSlNPTi5wYXJzZSg8c3RyaW5nPnRhcmdldC5kYXRhc2V0LnBvc3QpKTtcbiAgICAgICAgY29uc3QgcG9zdDogUG9zdCA9IEpTT04ucGFyc2UoPHN0cmluZz50YXJnZXQuZGF0YXNldC5wb3N0KTtcbiAgICAgICAgcG9zdC50aXRsZSA9IHRhcmdldC5pbm5lclRleHQ7XG4gICAgICAgIHRoaXMudG9Eb1NlcnZpY2UudXBkYXRlKHBvc3QpO1xuXG4gICAgICAgIHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdweC00JywgJ3B5LTQnKTtcbiAgICAgICAgdGFyZ2V0LmNvbnRlbnRFZGl0YWJsZSA9ICdmYWxzZSc7XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBvbmNlOiB0cnVlLFxuICAgICAgfVxuICAgICk7XG4gICAgJHRvZG8hLmNsYXNzTGlzdC5hZGQoJ3B4LTQnLCAncHktNCcpO1xuICAgICR0b2RvIS5jb250ZW50RWRpdGFibGUgPSAndHJ1ZSc7XG4gICAgJHRvZG8hLmZvY3VzKCk7XG4gIH1cblxuICBkZWxldGVUb0RvKCR0b2RvOiBIVE1MRWxlbWVudCkge1xuICAgIGNvbnN0IHBvc3Q6IFBvc3QgPSBKU09OLnBhcnNlKDxzdHJpbmc+JHRvZG8uZGF0YXNldC5wb3N0KTtcbiAgICB0aGlzLnRvRG9TZXJ2aWNlLmRlc3Ryb3kocG9zdCk7XG4gICAgJHRvZG8uY2xvc2VzdCgnZGl2LmNvbHVtbicpPy5yZW1vdmUoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJy4uL3V0aWxzL2h0dHAtY2xpZW50JztcbmltcG9ydCB7IEFwaUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9hcGktY29uZmlnJztcblxuZXhwb3J0IGNsYXNzIFRvRG9TZXJ2aWNlIHtcbiAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50O1xuICBwcml2YXRlIHNlcnZpY2VVUkw6IHN0cmluZyA9IGAke0FwaUNvbmZpZy5CQVNFX1VSTH0vdG9kb3MvYDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmh0dHAgPSBuZXcgSHR0cENsaWVudCgpO1xuICB9XG5cbiAgZ2V0QWxsKGxpbWl0OiBudW1iZXIgPSAyMCk6IFByb21pc2U8QXJyYXk8UG9zdD4+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldChgJHt0aGlzLnNlcnZpY2VVUkx9P19saW1pdD0ke2xpbWl0fWApO1xuICB9XG5cbiAgZmluZCgpIHt9XG5cbiAgY3JlYXRlKCkge31cblxuICB1cGRhdGUocG9zdDogUG9zdCkge1xuICAgIHJldHVybiB0aGlzLmh0dHAudXBkYXRlKGAke3RoaXMuc2VydmljZVVSTH0ke3Bvc3QuaWR9YCwgcG9zdCk7XG4gIH1cblxuICBkZXN0cm95KHBvc3Q6IFBvc3QpIHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmRlc3Ryb3koYCR7dGhpcy5zZXJ2aWNlVVJMfSR7cG9zdC5pZH1gKTtcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEh0dHBDbGllbnQge1xuICBnZXQodXJsOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBIdHRwQ2xpZW50LmNvbmZpZ3VyZVJlcXVlc3QodXJsLCAnR0VUJyk7XG4gIH1cblxuICBkZXN0cm95KHVybDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gSHR0cENsaWVudC5jb25maWd1cmVSZXF1ZXN0KHVybCwgJ0RFTEVURScpO1xuICB9XG5cbiAgcG9zdCh1cmw6IHN0cmluZywgYm9keTogb2JqZWN0IHwgbnVsbCA9IG51bGwpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBIdHRwQ2xpZW50LmNvbmZpZ3VyZVJlcXVlc3QodXJsLCAnUE9TVCcpO1xuICB9XG5cbiAgdXBkYXRlKHVybDogc3RyaW5nLCBib2R5OiBvYmplY3QgfCBudWxsID0gbnVsbCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIEh0dHBDbGllbnQuY29uZmlndXJlUmVxdWVzdCh1cmwsICdQVVQnLCBib2R5KTtcbiAgfVxuXG4gIHN0YXRpYyBjb25maWd1cmVSZXF1ZXN0KFxuICAgIHVybDogc3RyaW5nLFxuICAgIG1ldGhvZDogc3RyaW5nLFxuICAgIGJvZHk6IG9iamVjdCB8IG51bGwgPSBudWxsXG4gICk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIGZldGNoKHVybCwge1xuICAgICAgbWV0aG9kLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgnLFxuICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JyxcbiAgICAgIH0sXG4gICAgfSkudGhlbigocmVzcG9uc2U6IFJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpO1xuICB9XG59XG4iLCJleHBvcnQgY2xhc3MgQXBpQ29uZmlnIHtcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBCQVNFX1VSTDogc3RyaW5nID1cbiAgICAnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tJztcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=