!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ToDoService=void 0;var o=n(4),r=n(5),i=function(){function t(){this.serviceURL=r.ApiConfig.BASE_URL+"/todos/",this.http=new o.HttpClient}return t.prototype.getAll=function(t){return void 0===t&&(t=20),this.http.get(this.serviceURL+"?_limit="+t)},t.prototype.find=function(){},t.prototype.create=function(t){return this.http.post(""+this.serviceURL,t)},t.prototype.update=function(t){return this.http.update(""+this.serviceURL+t.id,t)},t.prototype.destroy=function(t){return this.http.destroy(""+this.serviceURL+t.id)},t}();e.ToDoService=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(2),r=n(3),i=n(6),c=n(8),s=function(){function t(){}return t.prototype.start=function(){console.log(">> Start app"),new o.NavBarComponent,new r.ToDoComponent({selector:"#to-do-container"}).render(),new i.CreateToDoComponent({selector:"#frm-create-post"}).render(),new c.UploadComponent({selector:"#frm-upload"})},t}();document.addEventListener("DOMContentLoaded",(function(){(new s).start()}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NavBarComponent=void 0;var o=function(){var t=Array.prototype.slice.call(document.querySelectorAll(".navbar-burger"),0);t.length>0&&t.forEach((function(t){t.addEventListener("click",(function(){var e=t.dataset.target,n=document.getElementById(e);t.classList.toggle("is-active"),null==n||n.classList.toggle("is-active")}))}))};e.NavBarComponent=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ToDoComponent=void 0;var o=n(0),r=function(){function t(t,e){void 0===e&&(e=new o.ToDoService),this.options=t,this.toDoService=e,this.posts=[]}return t.prototype.render=function(){var t=this,e=document.querySelector(this.options.selector);e&&this.toDoService.getAll().then((function(n){t.posts=n,e.innerHTML=t.template(),null==e||e.addEventListener("click",(function(e){var n,o=e.target;if(o.classList.value.includes("content")){var r=o.querySelector(".content")||o;t.updateToDo(r)}else if(o.classList.value.startsWith("card-footer-item")){e.preventDefault();r=null===(n=o.closest("article"))||void 0===n?void 0:n.querySelector(".content");t.deleteToDo(r)}}))}))},t.prototype.template=function(){var t="";return this.posts.forEach((function(e){t+='\n        <div class="column is-12">\n          <article class="card">\n            <div class="card-content">\n              <div  class="content"\n                    data-id="'+e.id+'"\n                    data-title="'+e.title+"\"\n                    data-post='"+JSON.stringify(e)+"'>\n                "+e.title+'\n              </div>\n            </div>\n            <footer class="card-footer">\n              <a href="#" class="card-footer-item">Delete</a>\n            </footer>\n          </article>\n        </div>\n      '})),t},t.prototype.updateToDo=function(t){var e=this;t.addEventListener("blur",(function(t){var n=t.target,o=JSON.parse(n.dataset.post);o.title=n.innerText,e.toDoService.update(o),n.classList.remove("px-4","py-4"),n.contentEditable="false"}),{once:!0}),t.classList.add("px-4","py-4"),t.contentEditable="true",t.focus()},t.prototype.deleteToDo=function(t){var e,n=JSON.parse(t.dataset.post);this.toDoService.destroy(n),null===(e=t.closest("div.column"))||void 0===e||e.remove()},t}();e.ToDoComponent=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HttpClient=void 0;var o=function(){function t(){}return t.prototype.get=function(e){return t.configureRequest(e,"GET")},t.prototype.destroy=function(e){return t.configureRequest(e,"DELETE")},t.prototype.post=function(e,n){return void 0===n&&(n=null),t.configureRequest(e,"POST",n)},t.prototype.update=function(e,n){return void 0===n&&(n=null),t.configureRequest(e,"PUT",n)},t.configureRequest=function(t,e,n){return void 0===n&&(n=null),fetch(t,{method:e,headers:{"Content-Type":"application/json; charset=UTF-8",Accept:"application/json; charset=UTF-8"}}).then((function(t){return t.json()}))},t}();e.HttpClient=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ApiConfig=void 0;var o=function(){function t(){}return t.BASE_URL="https://jsonplaceholder.typicode.com",t}();e.ApiConfig=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CreateToDoComponent=void 0;var o=n(0),r=n(7),i=function(){function t(t,e){void 0===e&&(e=new o.ToDoService),this.options=t,this.toDoService=e}return t.prototype.render=function(){var t=this,e=document.querySelector(this.options.selector);e&&e.addEventListener("submit",(function(n){var o;n.preventDefault();var i=e.querySelector("button"),c=e.querySelector("textarea");null===(o=c.closest(".control"))||void 0===o||o.classList.add("is-loading"),i.disabled=!0;var s=new r.Post(c.value);return t.toDoService.create(s).then((function(t){var e,n;null===(e=c.closest(".control"))||void 0===e||e.classList.remove("is-loading"),i.disabled=!1,c.value="",s.id=t.id;var o='\n          <article class="card">\n            <div class="card-content">\n              <div  class="content"\n                    data-id="'+s.id+'"\n                    data-title="'+s.title+"\"\n                    data-post='"+JSON.stringify(s)+"'>\n                "+s.title+'\n              </div>\n            </div>\n            <footer class="card-footer">\n              <a href="#" class="card-footer-item">Delete</a>\n            </footer>\n          </article>\n      ',r=document.createElement("div");r.classList.add("column","is-12"),r.innerHTML=o,null===(n=document.querySelector("#to-do-container"))||void 0===n||n.prepend(r)})),!1}))},t}();e.CreateToDoComponent=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Post=void 0;var o=function(t){this.userId=0,this.id=0,this.title="",this.body="",this.title=t};e.Post=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UploadComponent=void 0;var o=function(t){this.options=t;var e=document.querySelector(this.options.selector),n=null==e?void 0:e.querySelector("#file");null==n||n.addEventListener("change",(function(t){var n=t.target.files;if(n&&n.length>0){var o=null==e?void 0:e.querySelector(".file-name");o&&(o.textContent=n[0].name)}})),null==e||e.addEventListener("submit",(function(t){t.preventDefault();var e=t.target,n=new FormData(e);return fetch(e.action,{method:"POST",body:n}).then((function(t){return t.text()})).then((function(t){return alert(t)})).catch((function(t){return console.error("[Upload fetch error]:",t.message)})),!1}))};e.UploadComponent=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,