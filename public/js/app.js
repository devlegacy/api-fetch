!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BaseComponent=void 0;var o=function(){function t(t){this.selector=t.selector}return t.prototype.render=function(t){this.selector&&(document.querySelector(this.selector).innerHTML=null==t?void 0:t.data)},t}();e.BaseComponent=o},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.ToDoCardComponent=void 0;var c=n(2),i=function(t){function e(e,n){void 0===n&&(n=new c.ToDoService);var o=t.call(this,e)||this;return o.toDoService=n,o.posts=[],o}return r(e,t),e.prototype.template=function(){var t="";return this.posts.forEach((function(e){t+='\n        <div class="column is-12">\n          <article class="card">\n            <div class="card-content">\n              <div  class="content"\n                    data-id="'+e.id+'"\n                    data-title="'+e.title+"\"\n                    data-post='"+JSON.stringify(e)+"'>\n                "+e.title+'\n              </div>\n            </div>\n            <footer class="card-footer">\n              <a href="#" class="card-footer-item">\n                <button class="button is-danger">\n                  <span class="icon is-small">\n                    <i class="fas fa-trash"></i>\n                  </span>\n                  <span class="btn-delete-todo">\n                    Delete\n                  </span>\n                </button>\n              </a>\n            </footer>\n          </article>\n        </div>\n      '})),t},e.prototype.getToDoTitle=function(t){return t.querySelector(".content")||t},e.prototype.handlerTitleClick=function(t){var e=t.target,n=this.getToDoTitle(e);if(e.classList.contains("card-content")&&"true"===n.contentEditable)return t.preventDefault(),n.classList.remove("px-4","py-4"),void(n.contentEditable="false");"true"!==n.contentEditable&&(n.contentEditable="true",n.classList.add("px-4","py-4"),n.focus())},e.prototype.handlerTitleBlur=function(t){var e=this,n=t.target,o=n.closest(".card-content"),r=JSON.parse(n.dataset.post);r.title=n.innerText,null==o||o.classList.add("has-background-warning"),n.classList.remove("px-4","py-4"),n.contentEditable="false",this.toDoService.update(r).then((function(){null==o||o.addEventListener("click",(function(t){return e.handlerTitleClick(t)}),{once:!0}),null==o||o.classList.remove("has-background-warning")}))},e.prototype.handlerToDoCardActions=function(t){var e=this;t.forEach((function(t){var n,o=e.getToDoTitle(t),r=null===(n=t.closest(".card"))||void 0===n?void 0:n.querySelector("button");t.addEventListener("click",(function(t){return e.handlerTitleClick(t)}),{once:!0}),o.addEventListener("blur",(function(t){return e.handlerTitleBlur(t)})),r.addEventListener("click",(function(t){return e.deleteToDo(t)}))}))},e.prototype.render=function(){var e=this,n=document.querySelector(this.selector);n&&this.toDoService.getAll().then((function(o){e.posts=o,t.prototype.render.call(e,{data:e.template()});var r=n.querySelectorAll(".card-content");e.handlerToDoCardActions(r)}))},e.prototype.deleteToDo=function(t){var e,n=t.target,o=n.closest("button"),r=null===(e=n.closest("article"))||void 0===e?void 0:e.querySelector(".content"),c=JSON.parse(r.dataset.post);o.disabled=!0,this.toDoService.destroy(c).then((function(){var t;null===(t=r.closest("div.column"))||void 0===t||t.remove()}))},e}(n(0).BaseComponent);e.ToDoCardComponent=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ToDoService=void 0;var o=n(5),r=n(6),c=function(){function t(){this.serviceURL=r.ApiConfig.BASE_URL+"/todos/",this.http=new o.HttpClient}return t.prototype.getAll=function(t){return void 0===t&&(t=20),this.http.get(this.serviceURL+"?_limit="+t)},t.prototype.find=function(){},t.prototype.create=function(t){return this.http.post(""+this.serviceURL,t)},t.prototype.update=function(t){return this.http.update(""+this.serviceURL+t.id,t)},t.prototype.destroy=function(t){return this.http.destroy(""+this.serviceURL+t.id)},t}();e.ToDoService=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(4),r=n(1),c=n(7),i=n(9),s=n(10);(new(function(){function t(){}return t.prototype.start=function(){document.addEventListener("DOMContentLoaded",(function(){console.log(">> Start app"),new o.NavBarComponent({selector:".navbar-burger"}).render(),new s.PracticeComponent({selector:"#practices"}).render(),new i.UploadComponent({selector:"#frm-upload"}).render(),new r.ToDoCardComponent({selector:"#to-do-container"}).render(),new c.CreateToDoComponent({selector:"#frm-create-post"}).render()}))},t}())).start()},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.NavBarComponent=void 0;var c=n(0),i=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.findNavBarElements=function(){return Array.prototype.slice.call(document.querySelectorAll(this.selector),0)},e.prototype.handlerNavBarClick=function(t){t.addEventListener("click",(function(){var e=t.dataset.target||"navMenu",n=document.getElementById(e);t.classList.toggle("is-active"),null==n||n.classList.toggle("is-active")}))},e.prototype.render=function(){var t=this.findNavBarElements();null==t||t.forEach(this.handlerNavBarClick)},e}(c.BaseComponent);e.NavBarComponent=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HttpClient=void 0;var o=function(){function t(){}return t.prototype.get=function(e){return t.configureRequest(e,"GET")},t.prototype.destroy=function(e){return t.configureRequest(e,"DELETE")},t.prototype.post=function(e,n){return void 0===n&&(n=null),t.configureRequest(e,"POST",n)},t.prototype.update=function(e,n){return void 0===n&&(n=null),t.configureRequest(e,"PUT",n)},t.configureRequest=function(t,e,n){return void 0===n&&(n=null),fetch(t,{method:e,headers:{"Content-Type":"application/json; charset=UTF-8",Accept:"application/json; charset=UTF-8"}}).then((function(t){return t.json()}))},t}();e.HttpClient=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ApiConfig=void 0;var o=function(){function t(){}return t.BASE_URL="https://jsonplaceholder.typicode.com",t}();e.ApiConfig=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CreateToDoComponent=void 0;var o=n(2),r=n(8),c=function(){function t(t,e){void 0===e&&(e=new o.ToDoService),this.options=t,this.toDoService=e}return t.prototype.render=function(){var t=this,e=document.querySelector(this.options.selector);e&&e.addEventListener("submit",(function(n){var o;n.preventDefault();var c=e.querySelector("button"),i=e.querySelector("textarea");null===(o=i.closest(".control"))||void 0===o||o.classList.add("is-loading"),c.disabled=!0;var s=new r.Post(i.value);return t.toDoService.create(s).then((function(t){var e;s.id=t.id;var n='\n          <article class="card">\n            <div class="card-content">\n              <div  class="content"\n                    data-id="'+s.id+'"\n                    data-title="'+s.title+"\"\n                    data-post='"+JSON.stringify(s)+"'>\n                "+s.title+'\n              </div>\n            </div>\n            <footer class="card-footer">\n              <a href="#" class="card-footer-item">\n                <button class="button is-danger">\n                  <span class="icon is-small">\n                    <i class="fas fa-trash"></i>\n                  </span>\n                  <span class="btn-delete-todo">\n                    Delete\n                  </span>\n                </button>\n              </a>\n            </footer>\n          </article>\n      ',o=document.createElement("div");o.classList.add("column","is-12"),o.innerHTML=n,null===(e=document.querySelector("#to-do-container"))||void 0===e||e.prepend(o)})),!1}))},t}();e.CreateToDoComponent=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Post=void 0;var o=function(t){this.userId=0,this.id=0,this.title="",this.body="",this.title=t};e.Post=o},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.UploadComponent=void 0;var c=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.handlerUploadInputName=function(t){var e=null==t?void 0:t.querySelector("#file");null==e||e.addEventListener("change",(function(e){var n=e.target.files;if(n&&n.length>0){var o=null==t?void 0:t.querySelector(".file-name");o&&(o.textContent=n[0].name)}}))},e.prototype.handlerUpload=function(t){t.preventDefault();var e=t.target,n=new FormData(e);return fetch(e.action,{method:"POST",body:n}).then((function(t){return t.text()})).then((function(t){return alert(t)})).catch((function(t){return console.error("[Upload fetch error]:",t.message)})),!1},e.prototype.render=function(){var t=document.querySelector(this.selector);t&&this.handlerUploadInputName(t),null==t||t.addEventListener("submit",this.handlerUpload)},e}(n(0).BaseComponent);e.UploadComponent=c},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.PracticeComponent=void 0;var c=n(11),i=function(t){function e(e,n){void 0===n&&(n=new c.PracticeService);var o=t.call(this,e)||this;return o.practiceService=n,o}return r(e,t),e.prototype.render=function(){document.querySelector(this.selector)&&(this.practiceService.firstFetch(),this.practiceService.firstFetchWithAsyncAwait(),this.practiceService.handleError(),this.practiceService.queryParams(),this.practiceService.httpMethodPost(),this.practiceService.httpMethodGet(),this.practiceService.httpMethodPut(),this.practiceService.httpHeaders(),this.practiceService.httpCookies())},e}(n(0).BaseComponent);e.PracticeComponent=i},function(t,e,n){"use strict";var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(r,c){function i(t){try{a(o.next(t))}catch(t){c(t)}}function s(t){try{a(o.throw(t))}catch(t){c(t)}}function a(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,s)}a((o=o.apply(t,e||[])).next())}))},r=this&&this.__generator||function(t,e){var n,o,r,c,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return c={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(c[Symbol.iterator]=function(){return this}),c;function s(c){return function(s){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,o&&(r=2&c[0]?o.return:c[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,c[1])).done)return r;switch(o=0,r&&(c=[2&c[0],r.value]),c[0]){case 0:case 1:r=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,o=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!(r=i.trys,(r=r.length>0&&r[r.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!r||c[1]>r[0]&&c[1]<r[3])){i.label=c[1];break}if(6===c[0]&&i.label<r[1]){i.label=r[1],r=c;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(c);break}r[2]&&i.ops.pop(),i.trys.pop();continue}c=e.call(t,i)}catch(t){c=[6,t],o=0}finally{n=r=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.PracticeService=void 0;var c=function(){function t(){}return t.prototype.firstFetch=function(){fetch("https://jsonplaceholder.typicode.com/posts").then((function(t){return console.log(typeof t),t.json()})).then((function(t){return console.log(t)}))},t.prototype.firstFetchWithAsyncAwait=function(){o(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return[4,fetch("https://jsonplaceholder.typicode.com/posts")];case 1:return[4,e.sent().json()];case 2:return t=e.sent(),console.log(t),[2]}}))}))},t.prototype.handleError=function(){fetch("https://jsonplaceholder.typicode.com/pos").then((function(t){if(console.log("Status code: "+t.status),t.status>=200&&t.status<300)return t.json();throw new Error("Error in the fetch request")})).then((function(t){return console.log(t)})).catch((function(t){return console.error("[Fetch error]:",t.message)}))},t.prototype.queryParams=function(){var t={userId:1,_limit:3},e=new URL("https://jsonplaceholder.typicode.com/posts");Object.keys(t).forEach((function(n){e.searchParams.append(n,t[n])})),console.log(e),fetch(e.href).then((function(t){return t.json()})).then((function(t){return console.log(t)}))},t.prototype.httpMethodPost=function(){fetch("https://jsonplaceholder.typicode.com/posts",{method:"POST",body:JSON.stringify({userId:1,title:"foo",body:"bar"}),headers:{"Content-Type":"application/json; charset=UTF-8",Accept:"application/json; charset=UTF-8"}}).then((function(t){return t.json()})).then((function(t){return console.log(t)}))},t.prototype.httpMethodGet=function(){fetch("http://localhost:8000/api/",{method:"GET"}).then((function(t){return t.json()})).then((function(t){return console.log(t)})).catch((function(t){return console.error("[Cors fetch error]:",t.message)}))},t.prototype.httpMethodPut=function(){fetch("http://localhost:8000/api/",{method:"PUT"}).then((function(t){return t.json()})).then((function(t){return console.log(t)})).catch((function(t){return console.error("[Cors fetch error]:",t.message)}))},t.prototype.httpHeaders=function(){fetch("http://localhost:8000/api/",{method:"PUT",headers:{"Content-Type":"application/json; charset=UTF-8",Accept:"application/json; charset=UTF-8",Authentication:"Bearer: xxxxxxxyyyyxxxxyyy"}}).then((function(t){return t.json()})).then((function(t){return console.log(t)})).catch((function(t){return console.error("[Cors fetch error]:",t.message)}))},t.prototype.httpCookies=function(){document.cookie="username=Samuel",fetch("http://localhost:8000/api/",{method:"PUT",headers:{"Content-Type":"application/json; charset=UTF-8",Accept:"application/json; charset=UTF-8",Authentication:"Bearer: xxxxxxxyyyyxxxxyyy"},credentials:"include"}).then((function(t){return t.json()})).then((function(t){return console.log(t)})).catch((function(t){return console.error("[Cors fetch error]:",t.message)}))},t}();e.PracticeService=c}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,