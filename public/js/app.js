!function(t){var e={};function o(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)o.d(n,r,function(e){return t[e]}.bind(null,r));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=1)}([function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ToDoService=void 0;var n=o(4),r=o(5),i=function(){function t(){this.serviceURL=r.ApiConfig.BASE_URL+"/todos/",this.http=new n.HttpClient}return t.prototype.getAll=function(t){return void 0===t&&(t=20),this.http.get(this.serviceURL+"?_limit="+t)},t.prototype.find=function(){},t.prototype.create=function(t){return this.http.post(""+this.serviceURL,t)},t.prototype.update=function(t){return this.http.update(""+this.serviceURL+t.id,t)},t.prototype.destroy=function(t){return this.http.destroy(""+this.serviceURL+t.id)},t}();e.ToDoService=i},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=o(2),r=o(3),i=o(6),c=function(){function t(){}return t.prototype.start=function(){console.log(">> Start app"),new n.NavBarComponent,new r.ToDoComponent({selector:"#to-do-container"}).render(),new i.CreateToDoComponent({selector:"#frm-create-post"}).render()},t}();document.addEventListener("DOMContentLoaded",(function(){(new c).start()}))},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.NavBarComponent=void 0;var n=function(){var t=Array.prototype.slice.call(document.querySelectorAll(".navbar-burger"),0);t.length>0&&t.forEach((function(t){t.addEventListener("click",(function(){var e=t.dataset.target,o=document.getElementById(e);t.classList.toggle("is-active"),null==o||o.classList.toggle("is-active")}))}))};e.NavBarComponent=n},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ToDoComponent=void 0;var n=o(0),r=function(){function t(t,e){void 0===e&&(e=new n.ToDoService),this.options=t,this.toDoService=e,this.posts=[]}return t.prototype.render=function(){var t=this,e=document.querySelector(this.options.selector);e&&this.toDoService.getAll().then((function(o){t.posts=o,e.innerHTML=t.template(),null==e||e.addEventListener("click",(function(e){var o,n=e.target;if(n.classList.value.includes("content")){var r=n.querySelector(".content")||n;t.updateToDo(r)}else if(n.classList.value.startsWith("card-footer-item")){e.preventDefault();r=null===(o=n.closest("article"))||void 0===o?void 0:o.querySelector(".content");t.deleteToDo(r)}}))}))},t.prototype.template=function(){var t="";return this.posts.forEach((function(e){t+='\n        <div class="column is-12">\n          <article class="card">\n            <div class="card-content">\n              <div  class="content"\n                    data-id="'+e.id+'"\n                    data-title="'+e.title+"\"\n                    data-post='"+JSON.stringify(e)+"'>\n                "+e.title+'\n              </div>\n            </div>\n            <footer class="card-footer">\n              <a href="#" class="card-footer-item">Delete</a>\n            </footer>\n          </article>\n        </div>\n      '})),t},t.prototype.updateToDo=function(t){var e=this;t.addEventListener("blur",(function(t){var o=t.target,n=JSON.parse(o.dataset.post);n.title=o.innerText,e.toDoService.update(n),o.classList.remove("px-4","py-4"),o.contentEditable="false"}),{once:!0}),t.classList.add("px-4","py-4"),t.contentEditable="true",t.focus()},t.prototype.deleteToDo=function(t){var e,o=JSON.parse(t.dataset.post);this.toDoService.destroy(o),null===(e=t.closest("div.column"))||void 0===e||e.remove()},t}();e.ToDoComponent=r},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HttpClient=void 0;var n=function(){function t(){}return t.prototype.get=function(e){return t.configureRequest(e,"GET")},t.prototype.destroy=function(e){return t.configureRequest(e,"DELETE")},t.prototype.post=function(e,o){return void 0===o&&(o=null),t.configureRequest(e,"POST",o)},t.prototype.update=function(e,o){return void 0===o&&(o=null),t.configureRequest(e,"PUT",o)},t.configureRequest=function(t,e,o){return void 0===o&&(o=null),fetch(t,{method:e,headers:{"Content-Type":"application/json; charset=UTF-8",Accept:"application/json; charset=UTF-8"}}).then((function(t){return t.json()}))},t}();e.HttpClient=n},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ApiConfig=void 0;var n=function(){function t(){}return t.BASE_URL="https://jsonplaceholder.typicode.com",t}();e.ApiConfig=n},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CreateToDoComponent=void 0;var n=o(0),r=o(7),i=function(){function t(t,e){void 0===e&&(e=new n.ToDoService),this.options=t,this.toDoService=e}return t.prototype.render=function(){var t=this,e=document.querySelector(this.options.selector);e&&e.addEventListener("submit",(function(o){var n;o.preventDefault();var i=e.querySelector("button"),c=e.querySelector("textarea");null===(n=c.closest(".control"))||void 0===n||n.classList.add("is-loading"),i.disabled=!0;var s=new r.Post(c.value);return t.toDoService.create(s).then((function(t){var e,o;null===(e=c.closest(".control"))||void 0===e||e.classList.remove("is-loading"),i.disabled=!1,c.value="",s.id=t.id;var n='\n          <article class="card">\n            <div class="card-content">\n              <div  class="content"\n                    data-id="'+s.id+'"\n                    data-title="'+s.title+"\"\n                    data-post='"+JSON.stringify(s)+"'>\n                "+s.title+'\n              </div>\n            </div>\n            <footer class="card-footer">\n              <a href="#" class="card-footer-item">Delete</a>\n            </footer>\n          </article>\n      ',r=document.createElement("div");r.classList.add("column","is-12"),r.innerHTML=n,null===(o=document.querySelector("#to-do-container"))||void 0===o||o.prepend(r)})),!1}))},t}();e.CreateToDoComponent=i},function(t,e,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Post=void 0;var n=function(t){this.userId=0,this.id=0,this.title="",this.body="",this.title=t};e.Post=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,