!function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.BaseComponent=void 0;var o=function(){function t(t){this.selector=t.selector}return t.prototype.render=function(t){this.selector&&(document.querySelector(this.selector).innerHTML=null==t?void 0:t.data)},t}();e.BaseComponent=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ToDoService=void 0;var o=n(5),r=n(6),c=function(){function t(){this.serviceURL=r.ApiConfig.BASE_URL+"/todos/",this.http=new o.HttpClient}return t.prototype.getAll=function(t){return void 0===t&&(t=20),this.http.get(this.serviceURL+"?_limit="+t)},t.prototype.find=function(){},t.prototype.create=function(t){return this.http.post(""+this.serviceURL,t)},t.prototype.update=function(t){return this.http.update(""+this.serviceURL+t.id,t)},t.prototype.destroy=function(t){return this.http.destroy(""+this.serviceURL+t.id)},t}();e.ToDoService=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(3),r=n(4),c=n(7),i=n(9),s=n(10);(new(function(){function t(){}return t.prototype.start=function(){document.addEventListener("DOMContentLoaded",(function(){console.log(">> Start app"),new o.NavBarComponent({selector:".navbar-burger"}).render(),new s.PracticeComponent({selector:"#practices"}).render(),new i.UploadComponent({selector:"#frm-upload"}).render(),new r.ToDoCardComponent({selector:"#to-do-container"}).render(),new c.CreateToDoComponent({selector:"#frm-create-post"}).render()}))},t}())).start()},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.NavBarComponent=void 0;var c=n(0),i=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.findNavBarElements=function(){return Array.prototype.slice.call(document.querySelectorAll(this.selector),0)},e.prototype.handlerNavBarClick=function(t){t.addEventListener("click",(function(){var e=t.dataset.target||"navMenu",n=document.getElementById(e);t.classList.toggle("is-active"),null==n||n.classList.toggle("is-active")}))},e.prototype.render=function(){var t=this.findNavBarElements();null==t||t.forEach(this.handlerNavBarClick)},e}(c.BaseComponent);e.NavBarComponent=i},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.ToDoCardComponent=e.handlerClick=void 0;var c=n(1),i=n(0);function s(t){var e=t.target,n=e.querySelector(".content")||e;if("true"===n.contentEditable)return!1;n.contentEditable="true",n.classList.add("px-4","py-4"),n.focus(),n.addEventListener("blur",(function(t){console.log(t),n.classList.remove("px-4","py-4"),n.contentEditable="false"}))}e.handlerClick=s;var a=function(t){function e(e,n){void 0===n&&(n=new c.ToDoService);var o=t.call(this,e)||this;return o.toDoService=n,o.posts=[],o}return r(e,t),e.prototype.template=function(){var t="";return this.posts.forEach((function(e){t+='\n        <div class="column is-12">\n          <article class="card">\n            <div class="card-content">\n              <div  class="content"\n                    data-id="'+e.id+'"\n                    data-title="'+e.title+"\"\n                    data-post='"+JSON.stringify(e)+"'>\n                "+e.title+'\n              </div>\n            </div>\n            <footer class="card-footer">\n              <a href="#" class="card-footer-item">\n                <button class="button is-danger">\n                  <span class="icon is-small">\n                    <i class="fas fa-trash"></i>\n                  </span>\n                  <span class="btn-delete-todo">\n                    Delete\n                  </span>\n                </button>\n              </a>\n            </footer>\n          </article>\n        </div>\n      '})),t},e.prototype.handlerToDoCardActions=function(t){t.querySelectorAll(".card-content").forEach((function(t){t.addEventListener("click",s)}))},e.prototype.render=function(){var e=this,n=document.querySelector(this.selector);n&&this.toDoService.getAll().then((function(o){e.posts=o,t.prototype.render.call(e,{data:e.template()}),e.handlerToDoCardActions(n)}))},e}(i.BaseComponent);e.ToDoCardComponent=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HttpClient=void 0;var o=function(){function t(){}return t.prototype.get=function(e){return t.configureRequest(e,"GET")},t.prototype.destroy=function(e){return t.configureRequest(e,"DELETE")},t.prototype.post=function(e,n){return void 0===n&&(n=null),t.configureRequest(e,"POST",n)},t.prototype.update=function(e,n){return void 0===n&&(n=null),t.configureRequest(e,"PUT",n)},t.configureRequest=function(t,e,n){return void 0===n&&(n=null),fetch(t,{method:e,headers:{"Content-Type":"application/json; charset=UTF-8",Accept:"application/json; charset=UTF-8"}}).then((function(t){return t.json()}))},t}();e.HttpClient=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ApiConfig=void 0;var o=function(){function t(){}return t.BASE_URL="https://jsonplaceholder.typicode.com",t}();e.ApiConfig=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CreateToDoComponent=void 0;var o=n(1),r=n(8),c=n(4),i=function(){function t(t,e){void 0===e&&(e=new o.ToDoService),this.options=t,this.toDoService=e}return t.prototype.render=function(){var t=this,e=document.querySelector(this.options.selector);e&&e.addEventListener("submit",(function(n){var o;n.preventDefault();var i=e.querySelector("button"),s=e.querySelector("textarea");null===(o=s.closest(".control"))||void 0===o||o.classList.add("is-loading"),i.disabled=!0;var a=new r.Post(s.value);return t.toDoService.create(a).then((function(t){var e,n,o;a.id=t.id;var r='\n          <article class="card">\n            <div class="card-content">\n              <div  class="content"\n                    data-id="'+a.id+'"\n                    data-title="'+a.title+"\"\n                    data-post='"+JSON.stringify(a)+"'>\n                "+a.title+'\n              </div>\n            </div>\n            <footer class="card-footer">\n              <a href="#" class="card-footer-item">\n                <button class="button is-danger">\n                  <span class="icon is-small">\n                    <i class="fas fa-trash"></i>\n                  </span>\n                  <span class="btn-delete-todo">\n                    Delete\n                  </span>\n                </button>\n              </a>\n            </footer>\n          </article>\n      ',u=document.createElement("div");u.classList.add("column","is-12"),u.innerHTML=r,null===(e=document.querySelector("#to-do-container"))||void 0===e||e.prepend(u),null===(n=u.querySelector(".card-content"))||void 0===n||n.addEventListener("click",c.handlerClick),null===(o=s.closest(".control"))||void 0===o||o.classList.remove("is-loading"),i.classList.add("is-loading"),i.disabled=!1,s.value="",i.classList.remove("is-loading")})),!1}))},t}();e.CreateToDoComponent=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Post=void 0;var o=function(t){this.userId=0,this.id=0,this.title="",this.body="",this.title=t};e.Post=o},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.UploadComponent=void 0;var c=function(t){function e(e){return t.call(this,e)||this}return r(e,t),e.prototype.handlerUploadInputName=function(t){var e=null==t?void 0:t.querySelector("#file");null==e||e.addEventListener("change",(function(e){var n=e.target.files;if(n&&n.length>0){var o=null==t?void 0:t.querySelector(".file-name");o&&(o.textContent=n[0].name)}}))},e.prototype.handlerUpload=function(t){t.preventDefault();var e=t.target,n=new FormData(e);return fetch(e.action,{method:"POST",body:n}).then((function(t){return t.text()})).then((function(t){return alert(t)})).catch((function(t){return console.error("[Upload fetch error]:",t.message)})),!1},e.prototype.render=function(){var t=document.querySelector(this.selector);t&&this.handlerUploadInputName(t),null==t||t.addEventListener("submit",this.handlerUpload)},e}(n(0).BaseComponent);e.UploadComponent=c},function(t,e,n){"use strict";var o,r=this&&this.__extends||(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0}),e.PracticeComponent=void 0;var c=n(11),i=function(t){function e(e,n){void 0===n&&(n=new c.PracticeService);var o=t.call(this,e)||this;return o.practiceService=n,o}return r(e,t),e.prototype.render=function(){document.querySelector(this.selector)&&(this.practiceService.firstFetch(),this.practiceService.firstFetchWithAsyncAwait(),this.practiceService.handleError(),this.practiceService.queryParams(),this.practiceService.httpMethodPost(),this.practiceService.httpMethodGet(),this.practiceService.httpMethodPut(),this.practiceService.httpHeaders(),this.practiceService.httpCookies())},e}(n(0).BaseComponent);e.PracticeComponent=i},function(t,e,n){"use strict";var o=this&&this.__awaiter||function(t,e,n,o){return new(n||(n=Promise))((function(r,c){function i(t){try{a(o.next(t))}catch(t){c(t)}}function s(t){try{a(o.throw(t))}catch(t){c(t)}}function a(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(i,s)}a((o=o.apply(t,e||[])).next())}))},r=this&&this.__generator||function(t,e){var n,o,r,c,i={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return c={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(c[Symbol.iterator]=function(){return this}),c;function s(c){return function(s){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,o&&(r=2&c[0]?o.return:c[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,c[1])).done)return r;switch(o=0,r&&(c=[2&c[0],r.value]),c[0]){case 0:case 1:r=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,o=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!(r=i.trys,(r=r.length>0&&r[r.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!r||c[1]>r[0]&&c[1]<r[3])){i.label=c[1];break}if(6===c[0]&&i.label<r[1]){i.label=r[1],r=c;break}if(r&&i.label<r[2]){i.label=r[2],i.ops.push(c);break}r[2]&&i.ops.pop(),i.trys.pop();continue}c=e.call(t,i)}catch(t){c=[6,t],o=0}finally{n=r=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.PracticeService=void 0;var c=function(){function t(){}return t.prototype.firstFetch=function(){fetch("https://jsonplaceholder.typicode.com/posts").then((function(t){return console.log(typeof t),t.json()})).then((function(t){return console.log(t)}))},t.prototype.firstFetchWithAsyncAwait=function(){o(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return[4,fetch("https://jsonplaceholder.typicode.com/posts")];case 1:return[4,e.sent().json()];case 2:return t=e.sent(),console.log(t),[2]}}))}))},t.prototype.handleError=function(){fetch("https://jsonplaceholder.typicode.com/pos").then((function(t){if(console.log("Status code: "+t.status),t.status>=200&&t.status<300)return t.json();throw new Error("Error in the fetch request")})).then((function(t){return console.log(t)})).catch((function(t){return console.error("[Fetch error]:",t.message)}))},t.prototype.queryParams=function(){var t={userId:1,_limit:3},e=new URL("https://jsonplaceholder.typicode.com/posts");Object.keys(t).forEach((function(n){e.searchParams.append(n,t[n])})),console.log(e),fetch(e.href).then((function(t){return t.json()})).then((function(t){return console.log(t)}))},t.prototype.httpMethodPost=function(){fetch("https://jsonplaceholder.typicode.com/posts",{method:"POST",body:JSON.stringify({userId:1,title:"foo",body:"bar"}),headers:{"Content-Type":"application/json; charset=UTF-8",Accept:"application/json; charset=UTF-8"}}).then((function(t){return t.json()})).then((function(t){return console.log(t)}))},t.prototype.httpMethodGet=function(){fetch("http://localhost:8000/api/",{method:"GET"}).then((function(t){return t.json()})).then((function(t){return console.log(t)})).catch((function(t){return console.error("[Cors fetch error]:",t.message)}))},t.prototype.httpMethodPut=function(){fetch("http://localhost:8000/api/",{method:"PUT"}).then((function(t){return t.json()})).then((function(t){return console.log(t)})).catch((function(t){return console.error("[Cors fetch error]:",t.message)}))},t.prototype.httpHeaders=function(){fetch("http://localhost:8000/api/",{method:"PUT",headers:{"Content-Type":"application/json; charset=UTF-8",Accept:"application/json; charset=UTF-8",Authentication:"Bearer: xxxxxxxyyyyxxxxyyy"}}).then((function(t){return t.json()})).then((function(t){return console.log(t)})).catch((function(t){return console.error("[Cors fetch error]:",t.message)}))},t.prototype.httpCookies=function(){document.cookie="username=Samuel",fetch("http://localhost:8000/api/",{method:"PUT",headers:{"Content-Type":"application/json; charset=UTF-8",Accept:"application/json; charset=UTF-8",Authentication:"Bearer: xxxxxxxyyyyxxxxyyy"},credentials:"include"}).then((function(t){return t.json()})).then((function(t){return console.log(t)})).catch((function(t){return console.error("[Cors fetch error]:",t.message)}))},t}();e.PracticeService=c}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvY29tcG9uZW50cy9iYXNlLWNvbXBvbmVudC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvdG8tZG8uc2VydmljZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL25hdi1iYXIuY29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3RvZG8vdG8tZG8tY2FyZC5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL2h0dHAtY2xpZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9jb25maWcvYXBpLWNvbmZpZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy90b2RvL2NyZWF0ZS10by1kby5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVscy9wb3N0LnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL3VwbG9hZC5jb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcHJhY3RpY2UuY29tcG9uZW50LnRzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9wcmFjdGljZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwib3B0aW9ucyIsInRoaXMiLCJzZWxlY3RvciIsInJlbmRlciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImlubmVySFRNTCIsImRhdGEiLCJCYXNlQ29tcG9uZW50Iiwic2VydmljZVVSTCIsIkFwaUNvbmZpZyIsIkJBU0VfVVJMIiwiaHR0cCIsIkh0dHBDbGllbnQiLCJnZXRBbGwiLCJsaW1pdCIsImZpbmQiLCJwb3N0IiwidXBkYXRlIiwiaWQiLCJkZXN0cm95IiwiVG9Eb1NlcnZpY2UiLCJzdGFydCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb25zb2xlIiwibG9nIiwiTmF2QmFyQ29tcG9uZW50IiwiUHJhY3RpY2VDb21wb25lbnQiLCJVcGxvYWRDb21wb25lbnQiLCJUb0RvQ2FyZENvbXBvbmVudCIsIkNyZWF0ZVRvRG9Db21wb25lbnQiLCJmaW5kTmF2QmFyRWxlbWVudHMiLCJBcnJheSIsInNsaWNlIiwicXVlcnlTZWxlY3RvckFsbCIsImhhbmRsZXJOYXZCYXJDbGljayIsIiRuYXYiLCJ0YXJnZXQiLCJkYXRhc2V0IiwiJHRhcmdldCIsImdldEVsZW1lbnRCeUlkIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiJG5hdmJhckJ1cmdlciIsImZvckVhY2giLCJoYW5kbGVyQ2xpY2siLCJlIiwiJHRvZG8iLCJjb250ZW50RWRpdGFibGUiLCJhZGQiLCJmb2N1cyIsInJlbW92ZSIsInRvRG9TZXJ2aWNlIiwicG9zdHMiLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiSlNPTiIsInN0cmluZ2lmeSIsImhhbmRsZXJUb0RvQ2FyZEFjdGlvbnMiLCIkZWxlbWVudCIsInRoZW4iLCJ1cmwiLCJjb25maWd1cmVSZXF1ZXN0IiwiYm9keSIsIm1ldGhvZCIsImZldGNoIiwiaGVhZGVycyIsIkFjY2VwdCIsInJlc3BvbnNlIiwianNvbiIsIiRmb3JtIiwicHJldmVudERlZmF1bHQiLCIkYnV0dG9uIiwiJHRpdGxlIiwiY2xvc2VzdCIsImRpc2FibGVkIiwiUG9zdCIsIm5ld1Bvc3QiLCJjcmVhdGVFbGVtZW50IiwicHJlcGVuZCIsInVzZXJJZCIsImhhbmRsZXJVcGxvYWRJbnB1dE5hbWUiLCIkZmlsZSIsImZpbGVzIiwibGVuZ3RoIiwiJGZpbGVuYW1lIiwidGV4dENvbnRlbnQiLCJoYW5kbGVyVXBsb2FkIiwiRm9ybURhdGEiLCJhY3Rpb24iLCJ0ZXh0IiwiYWxlcnQiLCJjYXRjaCIsImVyciIsImVycm9yIiwibWVzc2FnZSIsInByYWN0aWNlU2VydmljZSIsIlByYWN0aWNlU2VydmljZSIsImZpcnN0RmV0Y2giLCJmaXJzdEZldGNoV2l0aEFzeW5jQXdhaXQiLCJoYW5kbGVFcnJvciIsInF1ZXJ5UGFyYW1zIiwiaHR0cE1ldGhvZFBvc3QiLCJodHRwTWV0aG9kR2V0IiwiaHR0cE1ldGhvZFB1dCIsImh0dHBIZWFkZXJzIiwiaHR0cENvb2tpZXMiLCJzdGF0dXMiLCJFcnJvciIsIl9saW1pdCIsIlVSTCIsImtleXMiLCJwYXJhbUtleSIsInNlYXJjaFBhcmFtcyIsImFwcGVuZCIsImhyZWYiLCJBdXRoZW50aWNhdGlvbiIsImNvb2tpZSIsImNyZWRlbnRpYWxzIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVB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QWlCLFFBQVFDLElBQUlsQixNQUMzQnFGLE9BQU0sU0FBQ0MsR0FBZSxPQUFBckUsUUFBUXNFLE1BQU0sc0JBQXVCRCxFQUFJRSxhQUc3RCxZQUFBVSxZQUFQLFdBRUV4QyxNQUFNLDZCQUE4QixDQUNsQ0QsT0FBUSxNQUNSRSxRQUFTLENBQ1AsZUFBZ0Isa0NBQ2hCQyxPQUFRLGtDQUNSaUQsZUFBZ0IsZ0NBR2pCeEQsTUFBSyxTQUFDUSxHQUF1QixPQUFBQSxFQUFTQyxVQUN0Q1QsTUFBSyxTQUFDckQsR0FBUyxPQUFBaUIsUUFBUUMsSUFBSWxCLE1BQzNCcUYsT0FBTSxTQUFDQyxHQUFlLE9BQUFyRSxRQUFRc0UsTUFBTSxzQkFBdUJELEVBQUlFLGFBRzdELFlBQUFXLFlBQVAsV0FFRXRHLFNBQVNpSCxPQUFTLGtCQUNsQnBELE1BQU0sNkJBQThCLENBQ2xDRCxPQUFRLE1BQ1JFLFFBQVMsQ0FDUCxlQUFnQixrQ0FDaEJDLE9BQVEsa0NBQ1JpRCxlQUFnQiw4QkFFbEJFLFlBQWEsWUFPWjFELE1BQUssU0FBQ1EsR0FBdUIsT0FBQUEsRUFBU0MsVUFDdENULE1BQUssU0FBQ3JELEdBQVMsT0FBQWlCLFFBQVFDLElBQUlsQixNQUMzQnFGLE9BQU0sU0FBQ0MsR0FBZSxPQUFBckUsUUFBUXNFLE1BQU0sc0JBQXVCRCxFQUFJRSxhQUV0RSxFQTVIQSxHQUFhLEVBQUFFIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyKTtcbiIsImltcG9ydCB7IENvbXBvbmVudE9wdGlvbiB9IGZyb20gJy4uL29wdGlvbnMvY29tcG9uZW50LW9wdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBCYXNlQ29tcG9uZW50IHtcbiAgcHJvdGVjdGVkIHNlbGVjdG9yOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogQ29tcG9uZW50T3B0aW9uKSB7XG4gICAgdGhpcy5zZWxlY3RvciA9IG9wdGlvbnMuc2VsZWN0b3I7XG4gIH1cblxuICByZW5kZXIob3B0aW9uczogYW55KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc2VsZWN0b3IpIHtcbiAgICAgIGNvbnN0ICRlbGVtZW50OiBFbGVtZW50IHwgbnVsbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5zZWxlY3Rvcik7XG4gICAgICAvLyBpZiAoJGVsZW1lbnQpIHtcbiAgICAgIC8vIGh0dHBzOi8vd3d3LnR5cGVzY3JpcHRsYW5nLm9yZy9kb2NzL2hhbmRib29rL3JlbGVhc2Utbm90ZXMvdHlwZXNjcmlwdC0zLTcuaHRtbCNvcHRpb25hbC1jaGFpbmluZ1xuICAgICAgLy8gaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svcmVsZWFzZS1ub3Rlcy90eXBlc2NyaXB0LTItMC5odG1sI25vbi1udWxsLWFzc2VydGlvbi1vcGVyYXRvclxuICAgICAgLy8gaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svcmVsZWFzZS1ub3Rlcy90eXBlc2NyaXB0LTMtOS5odG1sI3BhcnNpbmctZGlmZmVyZW5jZXMtaW4tb3B0aW9uYWwtY2hhaW5pbmctYW5kLW5vbi1udWxsLWFzc2VydGlvbnNcbiAgICAgICRlbGVtZW50IS5pbm5lckhUTUwgPSBvcHRpb25zPy5kYXRhO1xuICAgICAgLy8gfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJy4uL3V0aWxzL2h0dHAtY2xpZW50JztcbmltcG9ydCB7IEFwaUNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9hcGktY29uZmlnJztcbmltcG9ydCB7IFBvc3QgfSBmcm9tICcuLi9tb2RlbHMvcG9zdCc7XG5cbmV4cG9ydCBjbGFzcyBUb0RvU2VydmljZSB7XG4gIHByaXZhdGUgaHR0cDogSHR0cENsaWVudDtcbiAgcHJpdmF0ZSBzZXJ2aWNlVVJMOiBzdHJpbmcgPSBgJHtBcGlDb25maWcuQkFTRV9VUkx9L3RvZG9zL2A7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5odHRwID0gbmV3IEh0dHBDbGllbnQoKTtcbiAgfVxuXG4gIGdldEFsbChsaW1pdDogbnVtYmVyID0gMjApOiBQcm9taXNlPEFycmF5PFBvc3Q+PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoYCR7dGhpcy5zZXJ2aWNlVVJMfT9fbGltaXQ9JHtsaW1pdH1gKTtcbiAgfVxuXG4gIGZpbmQoKSB7fVxuXG4gIGNyZWF0ZShwb3N0OiBQb3N0KSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KGAke3RoaXMuc2VydmljZVVSTH1gLCBwb3N0KTtcbiAgfVxuXG4gIHVwZGF0ZShwb3N0OiBQb3N0KSB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC51cGRhdGUoYCR7dGhpcy5zZXJ2aWNlVVJMfSR7cG9zdC5pZH1gLCBwb3N0KTtcbiAgfVxuXG4gIGRlc3Ryb3kocG9zdDogUG9zdCkge1xuICAgIHJldHVybiB0aGlzLmh0dHAuZGVzdHJveShgJHt0aGlzLnNlcnZpY2VVUkx9JHtwb3N0LmlkfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOYXZCYXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvY29tbW9uL25hdi1iYXIuY29tcG9uZW50JztcbmltcG9ydCB7IFRvRG9DYXJkQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3RvZG8vdG8tZG8tY2FyZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ3JlYXRlVG9Eb0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy90b2RvL2NyZWF0ZS10by1kby5jb21wb25lbnQnO1xuaW1wb3J0IHsgVXBsb2FkQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3VwbG9hZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUHJhY3RpY2VDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvcHJhY3RpY2UuY29tcG9uZW50JztcblxuY2xhc3MgQXBwIHtcbiAgc3RhcnQoKTogdm9pZCB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCc+PiBTdGFydCBhcHAnKTtcbiAgICAgIG5ldyBOYXZCYXJDb21wb25lbnQoeyBzZWxlY3RvcjogJy5uYXZiYXItYnVyZ2VyJyB9KS5yZW5kZXIoKTtcbiAgICAgIG5ldyBQcmFjdGljZUNvbXBvbmVudCh7IHNlbGVjdG9yOiAnI3ByYWN0aWNlcycgfSkucmVuZGVyKCk7XG4gICAgICBuZXcgVXBsb2FkQ29tcG9uZW50KHsgc2VsZWN0b3I6ICcjZnJtLXVwbG9hZCcgfSkucmVuZGVyKCk7XG5cbiAgICAgIG5ldyBUb0RvQ2FyZENvbXBvbmVudCh7IHNlbGVjdG9yOiAnI3RvLWRvLWNvbnRhaW5lcicgfSkucmVuZGVyKCk7XG4gICAgICBuZXcgQ3JlYXRlVG9Eb0NvbXBvbmVudCh7IHNlbGVjdG9yOiAnI2ZybS1jcmVhdGUtcG9zdCcgfSkucmVuZGVyKCk7XG4gICAgfSk7XG4gIH1cbn1cblxubmV3IEFwcCgpLnN0YXJ0KCk7XG4iLCJpbXBvcnQgeyBCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29yZS9jb21wb25lbnRzL2Jhc2UtY29tcG9uZW50JztcbmltcG9ydCB7IENvbXBvbmVudE9wdGlvbiB9IGZyb20gJy4uLy4uL2NvcmUvb3B0aW9ucy9jb21wb25lbnQtb3B0aW9uJztcbmltcG9ydCB7IFJlbmRlcmVkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29yZS9jb21wb25lbnRzL3JlbmRlcmVkLWNvbXBvbmVudCc7XG5cbmNvbnN0IERFRkFVTFRfVEFSR0VUID0gJ25hdk1lbnUnO1xuY29uc3QgTkFWX1RPR0dMRV9DTEFTUyA9ICdpcy1hY3RpdmUnO1xuXG5leHBvcnQgY2xhc3MgTmF2QmFyQ29tcG9uZW50XG4gIGV4dGVuZHMgQmFzZUNvbXBvbmVudFxuICBpbXBsZW1lbnRzIFJlbmRlcmVkQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9uczogQ29tcG9uZW50T3B0aW9uKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gIH1cblxuICBwcml2YXRlIGZpbmROYXZCYXJFbGVtZW50cygpOiBBcnJheTxIVE1MRWxlbWVudD4ge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5zZWxlY3RvciksXG4gICAgICAwXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlck5hdkJhckNsaWNrKCRuYXY6IEhUTUxFbGVtZW50KSB7XG4gICAgJG5hdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIC8vIEdldCB0aGUgdGFyZ2V0IGZyb20gdGhlIFwiZGF0YS10YXJnZXRcIiBhdHRyaWJ1dGVcbiAgICAgIGNvbnN0IHRhcmdldCA9ICRuYXYuZGF0YXNldC50YXJnZXQgfHwgREVGQVVMVF9UQVJHRVQ7XG4gICAgICBjb25zdCAkdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0KTtcblxuICAgICAgLy8gVG9nZ2xlIHRoZSBcImlzLWFjdGl2ZVwiIGNsYXNzIG9uIGJvdGggdGhlIFwibmF2YmFyLWJ1cmdlclwiIGFuZCB0aGUgXCJuYXZiYXItbWVudVwiXG4gICAgICAkbmF2LmNsYXNzTGlzdC50b2dnbGUoTkFWX1RPR0dMRV9DTEFTUyk7XG4gICAgICAkdGFyZ2V0Py5jbGFzc0xpc3QudG9nZ2xlKE5BVl9UT0dHTEVfQ0xBU1MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCk6IHZvaWQge1xuICAgIC8vIEdldCBhbGwgXCJuYXZiYXItYnVyZ2VyXCIgZWxlbWVudHNcbiAgICBjb25zdCAkbmF2YmFyQnVyZ2VyID0gdGhpcy5maW5kTmF2QmFyRWxlbWVudHMoKTtcblxuICAgIC8vIENoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbmF2YmFyIGJ1cmdlcnNcbiAgICAvLyBpZiAoJG5hdmJhckJ1cmdlcnMubGVuZ3RoID4gMCkge1xuICAgIC8vIEFkZCBhIGNsaWNrIGV2ZW50IG9uIGVhY2ggb2YgdGhlbVxuICAgICRuYXZiYXJCdXJnZXI/LmZvckVhY2godGhpcy5oYW5kbGVyTmF2QmFyQ2xpY2spO1xuICAgIC8vIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgVG9Eb1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy90by1kby5zZXJ2aWNlJztcbmltcG9ydCB7IFJlbmRlcmVkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29yZS9jb21wb25lbnRzL3JlbmRlcmVkLWNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb21wb25lbnRPcHRpb24gfSBmcm9tICcuLi8uLi9jb3JlL29wdGlvbnMvY29tcG9uZW50LW9wdGlvbic7XG5pbXBvcnQgeyBQb3N0IH0gZnJvbSAnLi4vLi4vbW9kZWxzL3Bvc3QnO1xuaW1wb3J0IHsgQmFzZUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2NvcmUvY29tcG9uZW50cy9iYXNlLWNvbXBvbmVudCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVyQ2xpY2soZTogTW91c2VFdmVudCkge1xuICBjb25zdCAkdGFyZ2V0ID0gPEhUTUxFbGVtZW50PmUudGFyZ2V0O1xuICBjb25zdCAkdG9kbyA9ICR0YXJnZXQucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oJy5jb250ZW50JykgfHwgJHRhcmdldDtcbiAgLy8gY29uc29sZS5sb2coJHRvZG8sICR0b2RvLmNvbnRlbnRFZGl0YWJsZSk7XG4gIGlmICgkdG9kby5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAkdG9kby5jb250ZW50RWRpdGFibGUgPSAndHJ1ZSc7XG4gICR0b2RvLmNsYXNzTGlzdC5hZGQoJ3B4LTQnLCAncHktNCcpO1xuICAkdG9kby5mb2N1cygpO1xuICAkdG9kby5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKGUpID0+IHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgICAkdG9kby5jbGFzc0xpc3QucmVtb3ZlKCdweC00JywgJ3B5LTQnKTtcbiAgICAkdG9kby5jb250ZW50RWRpdGFibGUgPSAnZmFsc2UnO1xuICB9KTtcbn1cblxuZXhwb3J0IGNsYXNzIFRvRG9DYXJkQ29tcG9uZW50XG4gIGV4dGVuZHMgQmFzZUNvbXBvbmVudFxuICBpbXBsZW1lbnRzIFJlbmRlcmVkQ29tcG9uZW50IHtcbiAgcHJpdmF0ZSBwb3N0czogQXJyYXk8UG9zdD4gPSBbXTtcbiAgY29uc3RydWN0b3IoXG4gICAgb3B0aW9uczogQ29tcG9uZW50T3B0aW9uLFxuICAgIHByaXZhdGUgdG9Eb1NlcnZpY2U6IFRvRG9TZXJ2aWNlID0gbmV3IFRvRG9TZXJ2aWNlKClcbiAgKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gIH1cblxuICBwcml2YXRlIHRlbXBsYXRlKCk6IHN0cmluZyB7XG4gICAgbGV0IHRlbXBsYXRlOiBzdHJpbmcgPSAnJztcbiAgICB0aGlzLnBvc3RzLmZvckVhY2goKHBvc3Q6IFBvc3QpID0+IHtcbiAgICAgIHRlbXBsYXRlICs9IGBcbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbHVtbiBpcy0xMlwiPlxuICAgICAgICAgIDxhcnRpY2xlIGNsYXNzPVwiY2FyZFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtY29udGVudFwiPlxuICAgICAgICAgICAgICA8ZGl2ICBjbGFzcz1cImNvbnRlbnRcIlxuICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPVwiJHtwb3N0LmlkfVwiXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtdGl0bGU9XCIke3Bvc3QudGl0bGV9XCJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS1wb3N0PScke0pTT04uc3RyaW5naWZ5KHBvc3QpfSc+XG4gICAgICAgICAgICAgICAgJHtwb3N0LnRpdGxlfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGZvb3RlciBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgY2xhc3M9XCJjYXJkLWZvb3Rlci1pdGVtXCI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ1dHRvbiBpcy1kYW5nZXJcIj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBpcy1zbWFsbFwiPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS10cmFzaFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYnRuLWRlbGV0ZS10b2RvXCI+XG4gICAgICAgICAgICAgICAgICAgIERlbGV0ZVxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L2Zvb3Rlcj5cbiAgICAgICAgICA8L2FydGljbGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgYDtcbiAgICB9KTtcbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZXJUb0RvQ2FyZEFjdGlvbnMoJGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgY29uc3QgJHRvZG9Db250ZW50cyA9ICRlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGw8SFRNTERpdkVsZW1lbnQ+KFxuICAgICAgJy5jYXJkLWNvbnRlbnQnXG4gICAgKTtcbiAgICAkdG9kb0NvbnRlbnRzLmZvckVhY2goKCR0b2RvOiBIVE1MRGl2RWxlbWVudCkgPT4ge1xuICAgICAgJHRvZG8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVyQ2xpY2spO1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCk6IHZvaWQge1xuICAgIGNvbnN0ICRlbGVtZW50OiBIVE1MRGl2RWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgdGhpcy5zZWxlY3RvclxuICAgICk7XG4gICAgaWYgKCRlbGVtZW50KSB7XG4gICAgICB0aGlzLnRvRG9TZXJ2aWNlLmdldEFsbCgpLnRoZW4oKHBvc3RzOiBBcnJheTxQb3N0PikgPT4ge1xuICAgICAgICB0aGlzLnBvc3RzID0gcG9zdHM7XG4gICAgICAgIHN1cGVyLnJlbmRlcih7IGRhdGE6IHRoaXMudGVtcGxhdGUoKSB9KTtcbiAgICAgICAgdGhpcy5oYW5kbGVyVG9Eb0NhcmRBY3Rpb25zKCRlbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByaXZhdGUgZGVsZXRlVG9EbygkdG9kbzogSFRNTEVsZW1lbnQpIHtcbiAgLy8gICBjb25zdCBwb3N0OiBQb3N0ID0gSlNPTi5wYXJzZSg8c3RyaW5nPiR0b2RvLmRhdGFzZXQucG9zdCk7XG4gIC8vICAgdGhpcy50b0RvU2VydmljZS5kZXN0cm95KHBvc3QpO1xuICAvLyAgICR0b2RvLmNsb3Nlc3QoJ2Rpdi5jb2x1bW4nKT8ucmVtb3ZlKCk7XG4gIC8vIH1cbn1cbiIsImV4cG9ydCBjbGFzcyBIdHRwQ2xpZW50IHtcbiAgZ2V0KHVybDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gSHR0cENsaWVudC5jb25maWd1cmVSZXF1ZXN0KHVybCwgJ0dFVCcpO1xuICB9XG5cbiAgZGVzdHJveSh1cmw6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIEh0dHBDbGllbnQuY29uZmlndXJlUmVxdWVzdCh1cmwsICdERUxFVEUnKTtcbiAgfVxuXG4gIHBvc3QodXJsOiBzdHJpbmcsIGJvZHk6IG9iamVjdCB8IG51bGwgPSBudWxsKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gSHR0cENsaWVudC5jb25maWd1cmVSZXF1ZXN0KHVybCwgJ1BPU1QnLCBib2R5KTtcbiAgfVxuXG4gIHVwZGF0ZSh1cmw6IHN0cmluZywgYm9keTogb2JqZWN0IHwgbnVsbCA9IG51bGwpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBIdHRwQ2xpZW50LmNvbmZpZ3VyZVJlcXVlc3QodXJsLCAnUFVUJywgYm9keSk7XG4gIH1cblxuICBzdGF0aWMgY29uZmlndXJlUmVxdWVzdChcbiAgICB1cmw6IHN0cmluZyxcbiAgICBtZXRob2Q6IHN0cmluZyxcbiAgICBib2R5OiBvYmplY3QgfCBudWxsID0gbnVsbFxuICApOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBmZXRjaCh1cmwsIHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JyxcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCcsXG4gICAgICB9LFxuICAgIH0pLnRoZW4oKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKTtcbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEFwaUNvbmZpZyB7XG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgQkFTRV9VUkw6IHN0cmluZyA9XG4gICAgJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbSc7XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnRPcHRpb24gfSBmcm9tICcuLi8uLi9jb3JlL29wdGlvbnMvY29tcG9uZW50LW9wdGlvbic7XG5pbXBvcnQgeyBUb0RvU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RvLWRvLnNlcnZpY2UnO1xuaW1wb3J0IHsgUmVuZGVyZWRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb3JlL2NvbXBvbmVudHMvcmVuZGVyZWQtY29tcG9uZW50JztcbmltcG9ydCB7IFBvc3QgfSBmcm9tICcuLi8uLi9tb2RlbHMvcG9zdCc7XG5pbXBvcnQgeyBoYW5kbGVyQ2xpY2sgfSBmcm9tICcuL3RvLWRvLWNhcmQuY29tcG9uZW50JztcblxuZXhwb3J0IGNsYXNzIENyZWF0ZVRvRG9Db21wb25lbnQgaW1wbGVtZW50cyBSZW5kZXJlZENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgb3B0aW9uczogQ29tcG9uZW50T3B0aW9uLFxuICAgIHByaXZhdGUgdG9Eb1NlcnZpY2U6IFRvRG9TZXJ2aWNlID0gbmV3IFRvRG9TZXJ2aWNlKClcbiAgKSB7fVxuICByZW5kZXIoKTogdm9pZCB7XG4gICAgY29uc3QgJGZvcm06IEhUTUxGb3JtRWxlbWVudCA9IDxIVE1MRm9ybUVsZW1lbnQ+KFxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLm9wdGlvbnMuc2VsZWN0b3IpXG4gICAgKTtcbiAgICBpZiAoJGZvcm0pIHtcbiAgICAgICRmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlOiBFdmVudCkgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0ICRidXR0b246IEhUTUxCdXR0b25FbGVtZW50ID0gPEhUTUxCdXR0b25FbGVtZW50PihcbiAgICAgICAgICAkZm9ybS5xdWVyeVNlbGVjdG9yKCdidXR0b24nKVxuICAgICAgICApO1xuICAgICAgICBjb25zdCAkdGl0bGU6IEhUTUxUZXh0QXJlYUVsZW1lbnQgPSA8SFRNTFRleHRBcmVhRWxlbWVudD4oXG4gICAgICAgICAgJGZvcm0ucXVlcnlTZWxlY3RvcigndGV4dGFyZWEnKVxuICAgICAgICApO1xuXG4gICAgICAgICR0aXRsZS5jbG9zZXN0KCcuY29udHJvbCcpPy5jbGFzc0xpc3QuYWRkKCdpcy1sb2FkaW5nJyk7XG4gICAgICAgICRidXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuXG4gICAgICAgIGNvbnN0IHBvc3Q6IFBvc3QgPSBuZXcgUG9zdCgkdGl0bGUudmFsdWUpO1xuICAgICAgICB0aGlzLnRvRG9TZXJ2aWNlLmNyZWF0ZShwb3N0KS50aGVuKChkYXRhOiBQb3N0KSA9PiB7XG4gICAgICAgICAgcG9zdC5pZCA9IGRhdGEuaWQ7XG4gICAgICAgICAgbGV0IHRlbXBsYXRlOiBzdHJpbmcgPSBgXG4gICAgICAgICAgPGFydGljbGUgY2xhc3M9XCJjYXJkXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1jb250ZW50XCI+XG4gICAgICAgICAgICAgIDxkaXYgIGNsYXNzPVwiY29udGVudFwiXG4gICAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9XCIke3Bvc3QuaWR9XCJcbiAgICAgICAgICAgICAgICAgICAgZGF0YS10aXRsZT1cIiR7cG9zdC50aXRsZX1cIlxuICAgICAgICAgICAgICAgICAgICBkYXRhLXBvc3Q9JyR7SlNPTi5zdHJpbmdpZnkocG9zdCl9Jz5cbiAgICAgICAgICAgICAgICAke3Bvc3QudGl0bGV9XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8Zm9vdGVyIGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBjbGFzcz1cImNhcmQtZm9vdGVyLWl0ZW1cIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnV0dG9uIGlzLWRhbmdlclwiPlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGlzLXNtYWxsXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXRyYXNoXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJidG4tZGVsZXRlLXRvZG9cIj5cbiAgICAgICAgICAgICAgICAgICAgRGVsZXRlXG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvZm9vdGVyPlxuICAgICAgICAgIDwvYXJ0aWNsZT5cbiAgICAgIGA7XG4gICAgICAgICAgY29uc3QgbmV3UG9zdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIG5ld1Bvc3QuY2xhc3NMaXN0LmFkZCgnY29sdW1uJywgJ2lzLTEyJyk7XG4gICAgICAgICAgbmV3UG9zdC5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcbiAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdG8tZG8tY29udGFpbmVyJyk/LnByZXBlbmQobmV3UG9zdCk7XG5cbiAgICAgICAgICBuZXdQb3N0XG4gICAgICAgICAgICAucXVlcnlTZWxlY3RvcjxIVE1MRGl2RWxlbWVudD4oJy5jYXJkLWNvbnRlbnQnKVxuICAgICAgICAgICAgPy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZXJDbGljayk7XG5cbiAgICAgICAgICAkdGl0bGUuY2xvc2VzdCgnLmNvbnRyb2wnKT8uY2xhc3NMaXN0LnJlbW92ZSgnaXMtbG9hZGluZycpO1xuICAgICAgICAgICRidXR0b24uY2xhc3NMaXN0LmFkZCgnaXMtbG9hZGluZycpO1xuICAgICAgICAgICRidXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAkdGl0bGUudmFsdWUgPSAnJztcbiAgICAgICAgICAkYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWxvYWRpbmcnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIFBvc3Qge1xuICB1c2VySWQ6IG51bWJlciA9IDA7XG4gIGlkPzogbnVtYmVyID0gMDtcbiAgdGl0bGU6IHN0cmluZyA9ICcnO1xuICBib2R5OiBzdHJpbmcgPSAnJztcblxuICBjb25zdHJ1Y3Rvcih0aXRsZTogc3RyaW5nKSB7XG4gICAgdGhpcy50aXRsZSA9IHRpdGxlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnRPcHRpb24gfSBmcm9tICcuLi9jb3JlL29wdGlvbnMvY29tcG9uZW50LW9wdGlvbic7XG5pbXBvcnQgeyBCYXNlQ29tcG9uZW50IH0gZnJvbSAnLi4vY29yZS9jb21wb25lbnRzL2Jhc2UtY29tcG9uZW50JztcbmltcG9ydCB7IFJlbmRlcmVkQ29tcG9uZW50IH0gZnJvbSAnLi4vY29yZS9jb21wb25lbnRzL3JlbmRlcmVkLWNvbXBvbmVudCc7XG5cbmV4cG9ydCBjbGFzcyBVcGxvYWRDb21wb25lbnRcbiAgZXh0ZW5kcyBCYXNlQ29tcG9uZW50XG4gIGltcGxlbWVudHMgUmVuZGVyZWRDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBDb21wb25lbnRPcHRpb24pIHtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlclVwbG9hZElucHV0TmFtZSgkZm9ybTogRWxlbWVudCkge1xuICAgIGNvbnN0ICRmaWxlID0gPEhUTUxJbnB1dEVsZW1lbnQ+JGZvcm0/LnF1ZXJ5U2VsZWN0b3IoJyNmaWxlJyk7XG4gICAgJGZpbGU/LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlOiBFdmVudCkgPT4ge1xuICAgICAgY29uc3QgZmlsZXMgPSAoPEhUTUxJbnB1dEVsZW1lbnQ+ZS50YXJnZXQpLmZpbGVzOyAvLyAkZmlsZXMuZmlsZXNcbiAgICAgIGlmIChmaWxlcyAmJiBmaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0ICRmaWxlbmFtZSA9ICRmb3JtPy5xdWVyeVNlbGVjdG9yKCcuZmlsZS1uYW1lJyk7XG4gICAgICAgIGlmICgkZmlsZW5hbWUpIHtcbiAgICAgICAgICAkZmlsZW5hbWUudGV4dENvbnRlbnQgPSBmaWxlc1swXS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZXJVcGxvYWQoZTogRXZlbnQpOiBib29sZWFuIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgdGFyZ2V0OiBIVE1MRm9ybUVsZW1lbnQgPSA8SFRNTEZvcm1FbGVtZW50PmUudGFyZ2V0O1xuICAgIGNvbnN0IGJvZHkgPSBuZXcgRm9ybURhdGEodGFyZ2V0KTtcbiAgICAvLyBjb25zdCBmaWxlID0gKDxIVE1MSW5wdXRFbGVtZW50PiRmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNmaWxlJykpLmZpbGVzO1xuICAgIC8vIGNvbnNvbGUubG9nKGZpbGUpO1xuICAgIC8vIGlmIChmaWxlKSB7XG4gICAgLy8gICBib2R5LmFwcGVuZCgnZmlsZScsIGZpbGVbMF0pO1xuICAgIC8vIH1cblxuICAgIC8vIFRPRE86IFRoaXMgY2FuIGJlIGEgc2VydmljZVxuICAgIGZldGNoKHRhcmdldC5hY3Rpb24sIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keSxcbiAgICB9KVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4gcmVzcG9uc2UudGV4dCgpKVxuICAgICAgLnRoZW4oKGRhdGE6IHN0cmluZykgPT4gYWxlcnQoZGF0YSkpXG4gICAgICAuY2F0Y2goKGVycjogRXJyb3IpID0+XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tVcGxvYWQgZmV0Y2ggZXJyb3JdOicsIGVyci5tZXNzYWdlKVxuICAgICAgKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyKCk6IHZvaWQge1xuICAgIGNvbnN0ICRmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNlbGVjdG9yKTtcbiAgICAkZm9ybSAmJiB0aGlzLmhhbmRsZXJVcGxvYWRJbnB1dE5hbWUoJGZvcm0pO1xuICAgICRmb3JtPy5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLmhhbmRsZXJVcGxvYWQpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnRPcHRpb24gfSBmcm9tICcuLi9jb3JlL29wdGlvbnMvY29tcG9uZW50LW9wdGlvbic7XG5pbXBvcnQgeyBQcmFjdGljZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9wcmFjdGljZS5zZXJ2aWNlJztcbmltcG9ydCB7IEJhc2VDb21wb25lbnQgfSBmcm9tICcuLi9jb3JlL2NvbXBvbmVudHMvYmFzZS1jb21wb25lbnQnO1xuaW1wb3J0IHsgUmVuZGVyZWRDb21wb25lbnQgfSBmcm9tICcuLi9jb3JlL2NvbXBvbmVudHMvcmVuZGVyZWQtY29tcG9uZW50JztcblxuZXhwb3J0IGNsYXNzIFByYWN0aWNlQ29tcG9uZW50XG4gIGV4dGVuZHMgQmFzZUNvbXBvbmVudFxuICBpbXBsZW1lbnRzIFJlbmRlcmVkQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoXG4gICAgb3B0aW9uczogQ29tcG9uZW50T3B0aW9uLFxuICAgIHByaXZhdGUgcHJhY3RpY2VTZXJ2aWNlOiBQcmFjdGljZVNlcnZpY2UgPSBuZXcgUHJhY3RpY2VTZXJ2aWNlKClcbiAgKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gIH1cblxuICByZW5kZXIoKTogdm9pZCB7XG4gICAgY29uc3QgJHByYWN0aWNlOiBIVE1MRm9ybUVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgIHRoaXMuc2VsZWN0b3JcbiAgICApO1xuICAgIGlmICgkcHJhY3RpY2UpIHtcbiAgICAgIHRoaXMucHJhY3RpY2VTZXJ2aWNlLmZpcnN0RmV0Y2goKTtcbiAgICAgIHRoaXMucHJhY3RpY2VTZXJ2aWNlLmZpcnN0RmV0Y2hXaXRoQXN5bmNBd2FpdCgpO1xuICAgICAgdGhpcy5wcmFjdGljZVNlcnZpY2UuaGFuZGxlRXJyb3IoKTtcbiAgICAgIHRoaXMucHJhY3RpY2VTZXJ2aWNlLnF1ZXJ5UGFyYW1zKCk7XG4gICAgICB0aGlzLnByYWN0aWNlU2VydmljZS5odHRwTWV0aG9kUG9zdCgpO1xuICAgICAgdGhpcy5wcmFjdGljZVNlcnZpY2UuaHR0cE1ldGhvZEdldCgpO1xuICAgICAgdGhpcy5wcmFjdGljZVNlcnZpY2UuaHR0cE1ldGhvZFB1dCgpO1xuICAgICAgdGhpcy5wcmFjdGljZVNlcnZpY2UuaHR0cEhlYWRlcnMoKTtcbiAgICAgIHRoaXMucHJhY3RpY2VTZXJ2aWNlLmh0dHBDb29raWVzKCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBQb3N0IH0gZnJvbSAnLi4vbW9kZWxzL3Bvc3QnO1xuXG5leHBvcnQgY2xhc3MgUHJhY3RpY2VTZXJ2aWNlIHtcbiAgcHVibGljIGZpcnN0RmV0Y2goKSB7XG4gICAgZmV0Y2goJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS9wb3N0cycpXG4gICAgICAudGhlbigocmVzcG9uc2U6IFJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHR5cGVvZiByZXNwb25zZSk7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICB9KSAvLyByZXNwb25zZTogVWludDhBcnJheVxuICAgICAgLnRoZW4oKHBvc3RzOiBBcnJheTxQb3N0PikgPT4gY29uc29sZS5sb2cocG9zdHMpKTtcbiAgfVxuXG4gIHB1YmxpYyBmaXJzdEZldGNoV2l0aEFzeW5jQXdhaXQoKSB7XG4gICAgKGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlOiBSZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICAnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3Bvc3RzJ1xuICAgICAgKTtcbiAgICAgIGNvbnN0IGJvZHk6IEFycmF5PFBvc3Q+ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgY29uc29sZS5sb2coYm9keSk7XG4gICAgfSkoKTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVFcnJvcigpIHtcbiAgICAvLyBIYW5kbGUgZXJyb3JcbiAgICBmZXRjaCgnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3BvcycpXG4gICAgICAudGhlbigocmVzcG9uc2U6IFJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBTdGF0dXMgY29kZTogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyA8IDMwMCkge1xuICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBpbiB0aGUgZmV0Y2ggcmVxdWVzdCcpO1xuICAgICAgICB9XG4gICAgICB9KSAvLyByZXNwb25zZTogVWludDhBcnJheVxuICAgICAgLnRoZW4oKHBvc3RzOiBBcnJheTxQb3N0PikgPT4gY29uc29sZS5sb2cocG9zdHMpKVxuICAgICAgLmNhdGNoKChlcnI6IEVycm9yKSA9PiBjb25zb2xlLmVycm9yKCdbRmV0Y2ggZXJyb3JdOicsIGVyci5tZXNzYWdlKSk7XG4gIH1cblxuICBwdWJsaWMgcXVlcnlQYXJhbXMoKSB7XG4gICAgLy8gUXVlcnkgcGFyYW1zXG4gICAgLy8gUmVhZCBtb3JlIG9uOiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZmV0Y2gtYXBpXG4gICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7XG4gICAgICB1c2VySWQ6IDEsXG4gICAgICBfbGltaXQ6IDMsXG4gICAgfTtcbiAgICBjb25zdCB1cmw6IFVSTCA9IG5ldyBVUkwoJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS9wb3N0cycpO1xuICAgIE9iamVjdC5rZXlzKHF1ZXJ5UGFyYW1zKS5mb3JFYWNoKChwYXJhbUtleTogc3RyaW5nKSA9PiB7XG4gICAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZChwYXJhbUtleSwgcXVlcnlQYXJhbXNbcGFyYW1LZXldKTtcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyh1cmwpO1xuICAgIGZldGNoKHVybC5ocmVmKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKSAvLyByZXNwb25zZTogVWludDhBcnJheVxuICAgICAgLnRoZW4oKHBvc3RzOiBBcnJheTxQb3N0PikgPT4gY29uc29sZS5sb2cocG9zdHMpKTtcbiAgfVxuXG4gIHB1YmxpYyBodHRwTWV0aG9kUG9zdCgpIHtcbiAgICAvLyBIVFRQIC0gTWV0aG9kc1xuICAgIC8vIFJlYWQgbW9yZSBvbjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZXMvZG9jcy9XZWIvSFRUUC9NZXRob2RzXG5cbiAgICAvLyBQT1NUXG4gICAgY29uc3QgcG9zdDogUG9zdCA9IHtcbiAgICAgIHVzZXJJZDogMSxcbiAgICAgIHRpdGxlOiAnZm9vJyxcbiAgICAgIGJvZHk6ICdiYXInLFxuICAgIH07XG4gICAgZmV0Y2goJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS9wb3N0cycsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocG9zdCksXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCcsXG4gICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb247IGNoYXJzZXQ9VVRGLTgnLFxuICAgICAgfSxcbiAgICB9KVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKSAvLyByZXNwb25zZTogVWludDhBcnJheVxuICAgICAgLnRoZW4oKHBvc3Q6IFBvc3QpID0+IGNvbnNvbGUubG9nKHBvc3QpKTtcbiAgfVxuXG4gIHB1YmxpYyBodHRwTWV0aG9kR2V0KCkge1xuICAgIGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjgwMDAvYXBpLycsIHsgbWV0aG9kOiAnR0VUJyB9KVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgLnRoZW4oKGRhdGEpID0+IGNvbnNvbGUubG9nKGRhdGEpKVxuICAgICAgLmNhdGNoKChlcnI6IEVycm9yKSA9PiBjb25zb2xlLmVycm9yKCdbQ29ycyBmZXRjaCBlcnJvcl06JywgZXJyLm1lc3NhZ2UpKTtcbiAgfVxuXG4gIHB1YmxpYyBodHRwTWV0aG9kUHV0KCkge1xuICAgIGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjgwMDAvYXBpLycsIHsgbWV0aG9kOiAnUFVUJyB9KVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgLnRoZW4oKGRhdGEpID0+IGNvbnNvbGUubG9nKGRhdGEpKVxuICAgICAgLmNhdGNoKChlcnI6IEVycm9yKSA9PiBjb25zb2xlLmVycm9yKCdbQ29ycyBmZXRjaCBlcnJvcl06JywgZXJyLm1lc3NhZ2UpKTtcbiAgfVxuXG4gIHB1YmxpYyBodHRwSGVhZGVycygpIHtcbiAgICAvLyBIZWFkZXJzXG4gICAgZmV0Y2goJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9hcGkvJywge1xuICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JyxcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCcsXG4gICAgICAgIEF1dGhlbnRpY2F0aW9uOiAnQmVhcmVyOiB4eHh4eHh4eXl5eXh4eHh5eXknLFxuICAgICAgfSxcbiAgICB9KVxuICAgICAgLnRoZW4oKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgLnRoZW4oKGRhdGEpID0+IGNvbnNvbGUubG9nKGRhdGEpKVxuICAgICAgLmNhdGNoKChlcnI6IEVycm9yKSA9PiBjb25zb2xlLmVycm9yKCdbQ29ycyBmZXRjaCBlcnJvcl06JywgZXJyLm1lc3NhZ2UpKTtcbiAgfVxuXG4gIHB1YmxpYyBodHRwQ29va2llcygpIHtcbiAgICAvLyBDb29raWVzXG4gICAgZG9jdW1lbnQuY29va2llID0gJ3VzZXJuYW1lPVNhbXVlbCc7XG4gICAgZmV0Y2goJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9hcGkvJywge1xuICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PVVURi04JyxcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEYtOCcsXG4gICAgICAgIEF1dGhlbnRpY2F0aW9uOiAnQmVhcmVyOiB4eHh4eHh4eXl5eXh4eHh5eXknLFxuICAgICAgfSxcbiAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXG4gICAgICAvKipcbiAgICAgICAqIG9taXQ6IE5ldmVyIHNlbmQgb3IgcmVjZWl2ZSBjb29raWVzLlxuICAgICAgICogc2FtZS1vcmlnaW46IFNlbmQgdXNlciBjcmVkZW50aWFscyAoY29va2llcywgYmFzaWMgaHR0cCBhdXRoLCBldGMuLikgaWYgdGhlIFVSTCBpcyBvbiB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGNhbGxpbmcgc2NyaXB0LiBUaGlzIGlzIHRoZSBkZWZhdWx0IHZhbHVlLlxuICAgICAgICogaW5jbHVkZTogQWx3YXlzIHNlbmQgdXNlciBjcmVkZW50aWFscyAoY29va2llcywgYmFzaWMgaHR0cCBhdXRoLCBldGMuLiksIGV2ZW4gZm9yIGNyb3NzLW9yaWdpbiBjYWxscy5cbiAgICAgICAqL1xuICAgIH0pXG4gICAgICAudGhlbigocmVzcG9uc2U6IFJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAudGhlbigoZGF0YSkgPT4gY29uc29sZS5sb2coZGF0YSkpXG4gICAgICAuY2F0Y2goKGVycjogRXJyb3IpID0+IGNvbnNvbGUuZXJyb3IoJ1tDb3JzIGZldGNoIGVycm9yXTonLCBlcnIubWVzc2FnZSkpO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9